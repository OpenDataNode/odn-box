#!/bin/sh
set -e

DEBIAN_8_VERSION="8.0"
ACTUAL_VERSION=$(lsb_release -r -s)
IS_DEBIAN_8=$(echo "${ACTUAL_VERSION} >= ${DEBIAN_8_VERSION}" | bc -l)

db_up() {
  echo ">> db_up"

  #Check if postgresql is started
  /etc/init.d/postgresql status > /dev/null || /etc/init.d/postgresql start >/dev/null 2>&1

  echo -n "INFO: Waiting for postgresql to be up..."
  CPT=0
  TIMEOUT=60
  while ! su - postgres -c "psql -q --output /dev/null -c \"SELECT COUNT(*) FROM pg_catalog.pg_authid\"" >/dev/null 2>&1
  do
    echo -n "."
    sleep 1
    CPT=$((${CPT}+1))
    if [ ${CPT} -eq ${TIMEOUT} ]
    then
      echo -e "\nERROR: Connection to PostgreSQL has not been established before timeout. Exiting"
      exit 1
    fi
  done
  echo " Done"
  echo "<<"
 
}

db_configure() {
  echo ">> db_configure: "$1" "$2

  dbname=$1
  usrname=$2
  CHK_PG_DB=$(su - postgres -c "psql -t -c \"select count(1) from pg_catalog.pg_database where datname = '${dbname}'\"")
  CHK_PG_USER=$(su - postgres -c "psql -t -c \"select count(1) from pg_user where usename = '${usrname}'\"")
  if [ ${CHK_PG_USER} -eq 0 ]
  then
    echo -n "INFO: Creating PostgreSQL user..."
    su - postgres -c "psql -q -c \"CREATE USER ${usrname} WITH PASSWORD 'odn-simple'\"" # >/dev/null 2>&1
    echo "Done"
  fi
  if [ ${CHK_PG_DB} -eq 0 ]
  then
    echo -n "INFO: Creating PostgreSQL database..."
    su - postgres -c "createdb -O ${usrname} ${dbname}" # >/dev/null 2>&1
    echo " Done" 
  fi

  echo "<<"
}

pipeline_configure() {
  echo ">> pipeline_configure"
  site=$1
  /usr/share/python/odn-ckan-shared/bin/paster --plugin=ckanext-odn-pipeline pipeline-cmd initdb -c /etc/odn-simple/${site}/production.ini
  echo "<<"
}

ckan_plugin_sync_confgure() {
  echo ">> ckan_plugin_sync_confgure"
  site=$1
  /usr/share/python/odn-ckan-shared/bin/paster --plugin=ckanext-odn-ic2pc-sync odn_ic2pc_sync_cmd initdb -c /etc/odn-simple/${site}/production.ini   
  echo "<<"
}

wsgi_configure() {
  echo ">> wsgi_configure"
  site=$1
   echo -n "INFO: Ckan db init "${site}
  /usr/share/python/odn-ckan-shared/bin/paster --plugin=ckan db init -c /etc/odn-simple/${site}/production.ini
   echo "<<"

}


add_odn_ckan_pc_user() {
   echo ">> add_odn_ckan_pc_user"

    user_name="admin"
    . /usr/share/python/odn-ckan-shared/bin/activate

        user_exists=`paster --plugin=ckan user search ${user_name} -c /etc/odn-simple/odn-ckan-pc/production.ini`
        if echo  $user_exists | grep --quiet name=${user_name}; then
            echo "user exists: "$user_name
        else
            user_info=`paster --plugin=ckan user add ${user_name} password=admin email=admin@opendata.gov -c /etc/odn-simple/odn-ckan-pc/production.ini`
            echo "user added: "$user_name
            paster --plugin=ckan sysadmin  add  ${user_name} -c   /etc/odn-simple/odn-ckan-pc/production.ini  
            echo "set as sysadmin: "$user_name            
        fi
        
        api_key=`paster --plugin=ckan user ${user_name} -c /etc/odn-simple/odn-ckan-pc/production.ini | grep -oP 'apikey=\K\w+-\w+-\w+-\w+-\w+'`
        # set api key at internal catalog
        sed  --in-place "s/odn.ic2pc.dst.ckan.api.key = .*/odn.ic2pc.dst.ckan.api.key =  $api_key/" /etc/odn-simple/odn-ckan-ic/production.ini 
        echo "set api-key "
       
    deactivate
    echo "<< "
}


add_odn_ckan_ic_user() {
   echo ">> add_odn_ckan_ic_user"
   user_name="admin"
   
   . /usr/share/python/odn-ckan-shared/bin/activate
        user_exists=`paster --plugin=ckan user search ${user_name} -c /etc/odn-simple/odn-ckan-ic/production.ini`
        if echo  $user_exists | grep --quiet name=${user_name}; then
            echo "user exists: "$user_name
        else
            user_info=`paster --plugin=ckan user add ${user_name} password=admin email=admin@opendata.gov -c /etc/odn-simple/odn-ckan-ic/production.ini`
            echo "user added: "$user_name
            paster --plugin=ckan sysadmin  add  ${user_name} -c   /etc/odn-simple/odn-ckan-ic/production.ini  
            echo "set as sysadmin: "$user_name
        fi
    deactivate
    echo "<< "
}


add_datastore_readonly_user() {
   echo ">> add_datastore_readonly_user "$1" "$2
   usrname=$1
   password=$2
   
   su - postgres -c "psql -q -c \"CREATE USER ${usrname} WITH PASSWORD '${password}'\"" || true
   echo "Done"

}

datastore_readonly_user_set_permission() {
   echo ">> datastore_readonly_user_set_permission "$1
   cfg_path=$1

   if ! id postgres > /dev/null 2>&1 ; then
      echo "user postgres is missing. Probably installation of postgresql went wrong"
      exit -1
   fi
   
   . /usr/share/python/odn-ckan-shared/bin/activate
      paster --plugin=ckan datastore set-permissions -c ${cfg_path} | su postgres -c psql  || true
      
   deactivate
   
   echo "<< "
}


ckan_plugin_sync_migrate() {
  echo ">> ckan_plugin_sync_migrate: $1"
  site=$1
  echo -n "INFO: Migrate ckanext-odn-ic2pc-sync"
  /usr/share/python/odn-ckan-shared/bin/paster --plugin=ckanext-odn-ic2pc-sync odn_ic2pc_sync_cmd migrate_to_v0.6.0 --config=/etc/odn-simple/${site}/production.ini   
  echo "<< "
 }

apache_restart() {
   echo ">> apache_restart"

    if [ -x "/etc/init.d/apache2" ]; then
            if [ -x /usr/sbin/invoke-rc.d ]; then
                    invoke-rc.d apache2 restart || true
            else
                    /etc/init.d/apache2 restart || true
            fi
    fi
    echo "<< "
}

set_virtuoso() {
   echo ">> set_virtuoso"
   if [ -x "/etc/init.d/virtuoso-opensource-7" ]; then
        echo "stop virtuoso"
        service virtuoso-opensource-7  stop || true
        sleep 1
   fi

   VIRTUOSO_CONFIG=/etc/virtuoso-opensource-7/virtuoso.ini 
   sed --in-place "s/\(DirsAllowed.*= \., .*\)/\1, \/var\/cache\/virtuoso\/upload/g"  $VIRTUOSO_CONFIG
   sed --in-place 's/= 8890/= 127.0.0.1:8890/g' $VIRTUOSO_CONFIG
   sed --in-place 's/= 1111/= 127.0.0.1:1111/g' $VIRTUOSO_CONFIG 
 
   if [ -x "/etc/init.d/virtuoso-opensource-7" ]; then
        echo "start virtuoso"
        service virtuoso-opensource-7  start || true
   fi
     
    add_user_system
    echo "<< "
}

get_hostname() {
    HOSTNAME=`hostname -f`
    if [ -z "${HOSTNAME}"  ]
    then
        HOSTNAME=`hostname`
    fi

    if [ -z "${HOSTNAME}"  ] 
    then
        HOSTNAME="localhost"
    fi

    HOSTNAME="$(echo "${HOSTNAME}" | tr -d '[[:space:]]')"    
    # return hostname
    echo "$HOSTNAME"
}


set_ckans_hostname() {
   echo ">> set_ckans_hostname: "$2
   site=$1
   HOSTNAME=$2
   
    sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
         /etc/odn-simple/${site}/production.ini
    echo "<< "
}

generate_token() {
    head -c16 /dev/urandom | md5sum |  awk '{ print $1 }'
}

set_ckans_api() {
    echo ">> set_ckan_internal_api: "$1 
    API_TOKEN=$1
    BACKEND_PROPS=/etc/unifiedviews/backend-config.properties
 
    # if token was previously set then we use it
    if grep -q "org.opendatanode.CKAN.secret.token" $BACKEND_PROPS ; then
      TOKEN_BACKEND=`cat $BACKEND_PROPS | grep -Po  '^org.opendatanode.CKAN.secret.token = \K\w+'`
    fi

    if [ "$TOKEN_BACKEND" != "" ]; then
        API_TOKEN=$TOKEN_BACKEND
    fi

     sed --in-place \
        -e "s/ckan.auth.internal_api.token.*/ckan.auth.internal_api.token = ${API_TOKEN}/" \
         /etc/odn-simple/odn-ckan-ic/production.ini
    
    echo "token: ${API_TOKEN}"
         
    echo "<< "
}

run_ckan_internationalization() {
   echo ">> run_ckan_internationalization"
    . /usr/share/python/odn-ckan-shared/bin/activate
    python /usr/share/odn-simple/odn-ckan-commons/translate/odn_i18n.py --translation_file /usr/share/odn-simple/odn-ckan-commons/translate/languages/sk/additional_translations.po    
    python /usr/share/odn-simple/odn-ckan-commons/translate/odn_i18n.py --translation_file /usr/share/odn-simple/odn-ckan-commons/translate/languages/sk/ckan.po
    deactivate
    echo "<< "
}

set_odn_ckan_for_cas() {
    echo ">> set_odn_ckan_for_cas site: $1,  hostname: $2"
    site=$1
    HOSTNAME=$2

    sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
         /etc/odn-simple/${site}/who.ini

    echo "<< "
}

configure_filestore() {
    echo ">> configure_filestore $1 "
        site=$1
        chown www-data:www-data /var/lib/${site}/storage

    echo "<< configure_filestore"
}

fix_perms_cron_job() {
    # set cron jobs as executable 
    # for update the tracking data and rebuild the search index - because popularity index
    echo ">> fix_perms_cron_job"
        chmod +x /etc/cron.daily/odn-ckan-ic
        chmod +x /etc/cron.daily/odn-ckan-pc

        echo "<< fix_perms_cron_job"
}

unifiedviews_restart() {
  echo ">> unifiedviews_restart"
  if [ -x "/etc/init.d/unifiedviews-backend" ]; then
     if [ -x /usr/sbin/invoke-rc.d ]; then
        invoke-rc.d unifiedviews-backend restart || true
     else
        /etc/init.d/unifiedviews-backend restart || true
     fi
  fi

  if [ -x "/etc/init.d/unifiedviews-frontend" ]; then
     if [ -x /usr/sbin/invoke-rc.d ]; then
        invoke-rc.d unifiedviews-frontend restart || true
       else
         /etc/init.d/unifiedviews-frontend restart || true
     fi
  fi    
  
  echo "<< unifiedviews_restart"
}


add_user_system() {
  echo ">> add_user_system"
  groupadd uploaders || true    
  
  #if user not exists
  if ! id uploader > /dev/null 2>&1 ; then
       useradd -g uploaders uploader -p $(perl -e'print crypt("uploader", "salt")') 
  fi
  
  #if user exists for unifiedviews
  if id unifiedviews > /dev/null 2>&1 ; then
       usermod -a -G uploaders unifiedviews
  fi 
  fix_perm
  
  echo "<< "
  
}


fix_python() {
echo ">> fix_python"

if  [ "$IS_DEBIAN_8" -eq 1 ] ; then
    echo "jessie - distribution"
    set +e
    TARGET=$(ls /usr/lib/python2.7/plat-*/_sysconfigdata_nd.py)
    set -e
    NAME_DIR="/usr/lib/python2.7"
    NAME=$NAME_DIR"/_sysconfigdata_nd.py"

    if [ -e "$TARGET" ] && [ -d "$NAME_DIR" ] && [ ! -e "$NAME" ] ; then
        # https://bugs.launchpad.net/ubuntu/+source/python2.7/+bug/1115466
        ln -s /usr/lib/python2.7/plat-*/_sysconfigdata_nd.py "$NAME" || true
    fi

    # http://stackoverflow.com/questions/28987891/patch-pyopenssl-for-sslv3-issue
    . /usr/share/python/odn-ckan-shared/bin/activate
    pip install requests==2.6.0
fi

echo "<< fix_python"
}

install_theme() {
    echo ">> install_theme"
    . /usr/share/python/odn-ckan-shared/bin/activate
    pip install --upgrade --no-deps /usr/share/odn-simple/odn-ckan-commons/theme/ckanext-odn-theme.tar.gz
    apache_restart
    sleep 2
    deactivate
    echo "<< "
}


set_unifiedviews() {
    echo ">> set_unifiedviews"
    HOSTNAME=$1
    TOKEN=$2
    FRONTEND_PROPS=/etc/unifiedviews/frontend-config.properties
    FRONTEND_PROPS_CAS=/usr/share/unifiedviews/frontend/WEB-INF/classes/cas-context-security.xml
    BACKEND_PROPS=/etc/unifiedviews/backend-config.properties
    IC_API=http://localhost:9080/internalcatalog/api/action/internal_api
   
    activate_unifiedviews_sso
    sed -i "s/#cas.behindProxy=.*/cas.behindProxy=true/" $FRONTEND_PROPS
    sed -i "s/#logout.url=.*/logout.url=https:\/\/$HOSTNAME\/unifiedviews\/cas_logout/" $FRONTEND_PROPS
    sed -i "s/#cas.server.host=.*/cas.server.host=https:\/\/localhost:38443\/cas/" $FRONTEND_PROPS
    sed -i "s/#cas.security.check.url=.*/cas.security.check.url=\/unifiedviews\/login\/cas/" $FRONTEND_PROPS
    sed -i "s/#cas.login.url=.*/cas.login.url=https:\/\/$HOSTNAME\/cas\/login/" $FRONTEND_PROPS
    sed -i "s/#cas.logout.url=.*/cas.logout.url=https:\/\/$HOSTNAME\/cas\/logout/" $FRONTEND_PROPS
	sed -i "s/#external.menu.link.name.*/external.menu.link.name=CKAN catalog/" $FRONTEND_PROPS
    sed -i "s/#external.menu.link.url.*/external.menu.link.url=http:\/\/$HOSTNAME\/internalcatalog/" $FRONTEND_PROPS

    sh /usr/share/unifiedviews/dist/odn_plugins/deploy-dpus.sh   
 
    # remove deprected parameter and correct one in backend
    if grep -q "dpu.uv-l-filesToCkan" $BACKEND_PROPS ; then
        echo "uv-l-filesToCkan has already been set for backend"
		sed -i "s/dpu.uv-l-filesToCkan.catalog.api.url/org.opendatanode.CKAN.api.url/" $BACKEND_PROPS
		sed -i "s/dpu.uv-l-filesToCkan.secret.token/org.opendatanode.CKAN.secret.token/" $BACKEND_PROPS
		echo "org.opendatanode.CKAN.http.header.X-Forwarded-Host = $HOSTNAME" >> $BACKEND_PROPS
		echo "org.opendatanode.CKAN.http.header.X-Forwarded-Proto = https" >> $BACKEND_PROPS
    fi
    
    if ! grep -q "dpu.l-rdfToVirtuoso.username" $BACKEND_PROPS ; then
  		echo "dpu.l-rdfToVirtuoso.username = dba" >> $BACKEND_PROPS
    fi
    
    if ! grep -q "dpu.l-rdfToVirtuoso.password" $BACKEND_PROPS ; then
  		echo "dpu.l-rdfToVirtuoso.password = dba" >> $BACKEND_PROPS
    fi
    
    if ! grep -q "dpu.l-rdfToVirtuoso.jdbc.url" $BACKEND_PROPS ; then
  		echo "dpu.l-rdfToVirtuoso.jdbc.url =  jdbc:virtuoso://localhost:1111/charset=UTF-8/" >> $BACKEND_PROPS
    fi
    
    if ! grep -q "dpu.uv-l-rdfToVirtuosoAndCkan.dataset.uri.pattern" $BACKEND_PROPS ; then
  		echo "dpu.uv-l-rdfToVirtuosoAndCkan.dataset.uri.pattern = https://$HOSTNAME/internalcatalog/dataset/${id}" >> $BACKEND_PROPS
    fi
    
    # remove correct parameter in backend
    if grep -q "dpu.uv-l-rdfToCkan.catalog" $BACKEND_PROPS ; then
        echo "uv-l-rdfToCkan update config"
        sed -i "/dpu.uv-l-rdfToCkan/d" $BACKEND_PROPS
    fi 
    
    # remove correct parameter in backend
    if grep -q "dpu.uv-l-relationalToCkan" $BACKEND_PROPS ; then
        echo "uv-l-relationalToCkan update config"
        sed -i "/dpu.uv-l-relationalToCkan/d" $BACKEND_PROPS
    fi 
    
    # remove correct parameter in backend
    if grep -q "dpu.uv-l-relationalDiffToCkan" $BACKEND_PROPS ; then
        echo "uv-l-relationalDiffToCkan update config"
        sed -i "/dpu.uv-l-relationalDiffToCkan/d" $BACKEND_PROPS
    fi 

    # add configuration of odn uv plugins for ckan integration 
    if grep -q "org.opendatanode.CKAN" $BACKEND_PROPS ; then
        echo "org.opendatanode.CKAN has been set at backend"
    else
        echo "org.opendatanode.CKAN.secret.token = $TOKEN" >> $BACKEND_PROPS
 		echo "org.opendatanode.CKAN.secret.token = $TOKEN" >> $FRONTEND_PROPS
		echo "org.opendatanode.CKAN.api.url = ${IC_API}" >> $BACKEND_PROPS
		echo "org.opendatanode.CKAN.api.url = ${IC_API}" >> $FRONTEND_PROPS
		echo "org.opendatanode.CKAN.http.header.X-Forwarded-Host = $HOSTNAME" >> $BACKEND_PROPS
		echo "org.opendatanode.CKAN.http.header.X-Forwarded-Host = $HOSTNAME" >> $FRONTEND_PROPS
		echo "org.opendatanode.CKAN.http.header.X-Forwarded-Proto = https" >> $BACKEND_PROPS
		echo "org.opendatanode.CKAN.http.header.X-Forwarded-Proto = https" >> $FRONTEND_PROPS
	fi 

    su - postgres -c "psql  -d unifiedviews" < \
		/usr/share/unifiedviews/pgsql/data-permissions-odn.sql

    unifiedviews_restart
    echo "<< set_unifiedviews"
}

fix_perm() {
  echo ">> fix_perm"
  chown uploader:uploaders /var/cache/virtuoso/upload
  mkdir -p /var/www/dump || true
  chown uploader:uploaders /var/www/dump
  chmod g+sw /var/www/dump
  chmod g+sw /var/cache/virtuoso/upload
  echo "<< "
}

set_midpoint() {
  echo ">> set_midpoint hostname: $1"
  HOSTNAME=$1
  
  # upload initial-objects {

  # value policy
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/valuePolicies/00000000-0000-0000-0000-000000000003 -d @/usr/share/odn-midpoint/initial-objects/010-value-policy.xml -v
  # system-configuration
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/systemConfigurations/00000000-0000-0000-0000-000000000001 -d @/usr/share/odn-midpoint/initial-objects/020-system-configuration.xml -v
  # openLDAP
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/resources/11111111-0000-0000-0000-000000000002 -d @/usr/share/odn-midpoint/initial-objects/205-resource-openLDAP.xml -v
  # role administrator
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/roles/11111111-0000-0000-0000-000000000003 -d @/usr/share/odn-midpoint/initial-objects/201-role-administrator.xml -v
  # role user
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/roles/11111111-0000-0000-0000-000000000004 -d @/usr/share/odn-midpoint/initial-objects/202-role-user.xml -v
  # template user
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/objectTemplates/10000000-0000-0000-0000-000000000222 -d @/usr/share/odn-midpoint/initial-objects/203-object-template-user.xml -v
    # organization root 
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/orgs/b98892c3-f2e9-45bb-82be-125e0946ea5e -d @/usr/share/odn-midpoint/initial-objects/200-organization-root.xml -v
    # organization comsode 
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/orgs/33a16020-f48a-4343-b2c8-e70290fcf476 -d @/usr/share/odn-midpoint/initial-objects/200-organization-comsode.xml -v
  # user cas admin
  curl --user administrator:5ecr3t -H "Content-Type: application/xml" -X PUT http://localhost:18080/midpoint/ws/rest/users/11111111-0000-0000-0000-000000000001 -d @/usr/share/odn-midpoint/initial-objects/205-user-cas-admin.xml -v
  #}
  
  if [ -h /usr/share/odn-midpoint/midpoint/WEB-INF/ctx-web-security.xml  ] ; then 
    unlink /usr/share/odn-midpoint/midpoint/WEB-INF/ctx-web-security.xml
  fi
  
  if [ -h /usr/share/odn-midpoint/midpoint/WEB-INF/web.xml  ] ; then 
    unlink /usr/share/odn-midpoint/midpoint/WEB-INF/web.xml
  fi
  
  # set domain name  
  sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
         /etc/odn-simple/odn-midpoint/ctx-web-security.xml 
  
  ln -s  /etc/odn-simple/odn-midpoint/ctx-web-security.xml  /usr/share/odn-midpoint/midpoint/WEB-INF/ctx-web-security.xml 
  ln -s  /etc/odn-simple/odn-midpoint/web.xml  /usr/share/odn-midpoint/midpoint/WEB-INF/web.xml
  
  chown -R odn-midpoint /etc/odn-simple/odn-midpoint
  chown -R odn-midpoint /usr/share/odn-midpoint/midpoint/WEB-INF/web.xml 
  chown -R odn-midpoint /usr/share/odn-midpoint/midpoint/WEB-INF/ctx-web-security.xml
  chown -R odn-midpoint /var/lib/midpoint.home/
    
  invoke-rc.d odn-midpoint restart
  echo "<< set_midpoint"
}

set_apache() {
  echo ">> set_apache hostname: $1"
  HOSTNAME=$1
  
  if  [ "$IS_DEBIAN_8" -eq 1 ] ; then
      ln -s /etc/odn-simple/odn-ckan-ic/apache.conf /etc/apache2/sites-available/odn-ckan-ic.conf  || true
      ln -s /etc/odn-simple/odn-ckan-pc/apache.conf /etc/apache2/sites-available/odn-ckan-pc.conf  || true 
      ln -s /etc/odn-simple/odn-simple-apache.conf /etc/apache2/sites-available/odn-simple.conf   || true
      ln -s /etc/odn-simple/odn-simple-ssl-apache.conf /etc/apache2/sites-available/odn-simple-ssl.conf  || true 
  else 
      ln -s /etc/odn-simple/odn-ckan-ic/apache.conf /etc/apache2/sites-available/odn-ckan-ic  || true 
      ln -s /etc/odn-simple/odn-ckan-pc/apache.conf /etc/apache2/sites-available/odn-ckan-pc  || true
      ln -s /etc/odn-simple/odn-simple-apache.conf /etc/apache2/sites-available/odn-simple  || true
      ln -s /etc/odn-simple/odn-simple-ssl-apache.conf /etc/apache2/sites-available/odn-simple-ssl  || true
  fi

  
  sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
         /etc/odn-simple/odn-simple-apache.conf

  sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
         /etc/odn-simple/odn-simple-ssl-apache.conf

  sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
        /etc/odn-simple/odn-ckan-ic/apache.conf         

  sed --in-place \
        -e "s/\$HOSTNAME/$HOSTNAME/" \
        /etc/odn-simple/odn-ckan-pc/apache.conf 
        
  a2dissite default || true
  a2dissite 000-default || true
  a2ensite odn-simple
  a2ensite odn-simple-ssl
  a2ensite odn-ckan-pc
  a2ensite odn-ckan-ic
  a2enmod proxy 
  a2enmod proxy_http
  a2enmod proxy_connect
  a2enmod headers
  a2enmod wsgi
  a2enmod rewrite    
  a2enmod ssl proxy_ajp
  apache_restart    
         
 echo "<< set_apache"        
}

solr_admin_restrict() { 
    RULE="INPUT -s 127.0.0.1/32 -p tcp -m tcp --dport 8983 -j ACCEPT"
    found=false
    found=`iptables -C $RULE && echo true` || true

    if [ "$found" != "true" ] ; then
        iptables -A $RULE
        iptables-save
    fi

    RULE="INPUT -p tcp --dport 8983 -j DROP"
    found=false
    found=`iptables -C $RULE && echo true || true`

    if [ "$found" != "true" ] ; then
        iptables -A $RULE
        iptables-save
    fi

}

solr_reindex() {
   echo ">> solr_reindex"
   /usr/share/python/odn-ckan-shared/bin/paster  --plugin=ckan search-index rebuild -r -c /etc/odn-simple/odn-ckan-ic/production.ini
   /usr/share/python/odn-ckan-shared/bin/paster  --plugin=ckan search-index rebuild -r -c /etc/odn-simple/odn-ckan-pc/production.ini
   echo "<< solr_reindex"
}


set_cas_theme(){
    cp /var/www/cas/cas.css /usr/share/odn-cas/webapps/cas/css 
}

upgrade() {
    chmod +x /usr/share/odn-simple/upgrade/1.1.0/migrate.sh
    /usr/share/odn-simple/upgrade/1.1.0/migrate.sh /usr/share/odn-simple/upgrade/1.1.0/schema.sql /usr/share/odn-simple/upgrade/1.1.0/constrains.sql
}

activate_unifiedviews_sso() {
   echo ">> activate_unifiedviews_sso"
   UV_DIR=/usr/share/unifiedviews
   cp $UV_DIR/frontend/WEB-INF/web.xml $UV_DIR/frontend/WEB-INF/web_default.xml
   cp $UV_DIR/frontend/WEB-INF/web_sso.xml $UV_DIR/frontend/WEB-INF/web.xml
   echo "<< activate_unifiedviews_sso"
}

case "$1" in
  configure)
    VERSION=$2
    UPGRADE="upgrade"
    # upgrade has to be done for all <= 1.0.3 
    ret=`dpkg --compare-versions $VERSION le 1.0.3  > /dev/null 2>&1 && echo $UPGRADE` || true 
    if [ "$ret" = "$UPGRADE" ] ; then
        upgrade
    fi
    
    hostname=$(get_hostname)
    solr_admin_restrict
    invoke-rc.d odn-solr restart
    echo "wait for restart"
    # TODO think about clever waiting
    sleep 10
    db_up
    token=$(generate_token)
    # prerequisites {
    fix_python
    install_theme
    ret=`dpkg --compare-versions $VERSION lt 1.2.0  > /dev/null 2>&1 && echo $UPGRADE` || true 
    if [ "$ret" = "$UPGRADE" ] ; then
         ckan_plugin_sync_migrate odn-ckan-ic
    fi    
    #} 
    # odn-ckan-ic {
    set_ckans_hostname odn-ckan-ic $hostname
    set_ckans_api $token
    db_configure odn-ckan-ic odn
    db_configure datastore-odn-ic odn
    add_datastore_readonly_user ds_odn_ic odn-ic
    wsgi_configure odn-ckan-ic
    pipeline_configure odn-ckan-ic
    ckan_plugin_sync_confgure odn-ckan-ic
    datastore_readonly_user_set_permission /etc/odn-simple/odn-ckan-ic/production.ini
    set_odn_ckan_for_cas odn-ckan-ic $hostname
    configure_filestore odn-ckan-ic
    # }
    # odn-ckan-pc {
    set_ckans_hostname odn-ckan-pc $hostname
    db_configure odn-ckan-pc odn
    db_configure datastore-odn-pc odn
    add_datastore_readonly_user ds_odn_pc odn-pc
    wsgi_configure odn-ckan-pc
    add_odn_ckan_pc_user
    datastore_readonly_user_set_permission /etc/odn-simple/odn-ckan-pc/production.ini    
    configure_filestore odn-ckan-pc
    #}
    # odn-ckan-ic and odn-ckan-pc {
    run_ckan_internationalization
    fix_perms_cron_job
    solr_reindex
    # }
    set_apache $hostname
    set_virtuoso
    set_unifiedviews $hostname $token
    set_midpoint $hostname
    set_cas_theme
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;
  triggered)
    echo "triggered: change unifiedviews configuration"
    activate_unifiedviews_sso
    
    ;;

  *)
    echo "$0 called with unknown argument \`$1'" >&2
    exit 1
  ;;
esac

#DEBHELPER#

exit 0
